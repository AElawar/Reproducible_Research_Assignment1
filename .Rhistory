pwd
getwd()
cd ~
getwd()
cd /
ls
cd User-1
getwd()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
# Compute the time series plot
plot(steps_means$interval,
steps_means$mean,
type="l",
col="red",
lwd=2,
xlab="Interval [minutes]",
ylab="Average Number of Steps",
main="Time-Series of Average No. of Steps per Interval (NA-removed)")
setwd("C:/Users/User-1/Desktop/DataScience/Reproducible Research/Week2/repdata%2Fdata%2Factivity/Reproducible_Research_Assignment1")
library(knitr)
opts_chunk$set(echo = TRUE)
# Load the raw data into R
activity_rawdata <- read.csv("activity.csv", stringsAsFactors=FALSE)
# Transform the date variable to an actual date format
activity_rawdata$date <- as.POSIXct(activity_rawdata$date, format="%Y-%m-%d")
# Compute the weekdays from the date variable
activity_rawdata <- data.frame(date=activity_rawdata$date,
weekday=tolower(weekdays(activity_rawdata$date)),
steps=activity_rawdata$steps,
interval=activity_rawdata$interval)
# Compute the day type (weekend or weekday) and add it to data frame
activity_rawdata <- cbind(activity_rawdata,
daytype=ifelse(activity_rawdata$weekday=="saturday"|
activity_rawdata$weekday=="sunday", "weekend",
"weekday"))
# Create the activity final data frame
activity_finaldata <- data.frame(date=activity_rawdata$date,
weekday=activity_rawdata$weekday,
daytype=activity_rawdata$daytype,
interval=activity_rawdata$interval,
steps=activity_rawdata$steps)
head(activity_finaldata)
# Compute the total number of steps each day (NA values removed)
steps_perDay <- aggregate(activity_finaldata$steps,
by=list(activity_finaldata$date), FUN=sum, na.rm=TRUE)
# Name the variables for the steps_perDay data frame
names(steps_perDay) <- c("date", "total")
head(steps_perDay)
hist(steps_perDay$total,
breaks=seq(from=0, to=25000, by=2500),
col="red",
xlab="Total number of Steps",
ylim=c(0, 20),
main="Histogram of Total No. of Steps per Day (NA-removed)")
mean(steps_perDay$total)
median(steps_perDay$total)
# Compute the mean of steps accross all days for each interval
steps_means <- aggregate(activity_finaldata$steps,
by=list(activity_finaldata$interval),
FUN=mean, na.rm=TRUE)
# Name the variables for the steps_means data frame
names(steps_means) <- c("interval", "mean")
head(steps_means)
# Compute the time series plot
plot(steps_means$interval,
steps_means$mean,
type="l",
col="red",
lwd=2,
xlab="Interval [minutes]",
ylab="Average Number of Steps",
main="Time-Series of Average No. of Steps per Interval (NA-removed)")
# Find the position of the maximum mean
max_position <- which(steps_means$mean==max(steps_means$mean))
# Lookup the value of interval at this position
max_interval <- steps_means[max_position, 1]
# Use the fact that a TRUE boolean value is equivalent to 1 and a FALSE to 0.
NA_count <- sum(is.na(activity_finaldata$steps))
# Find the NA positions
na_position <- which(is.na(activity_finaldata$steps))
# Create a vector of means
means_vector <- rep(mean(activity_finaldata$steps, na.rm=TRUE),
times=length(na_position))
# Replace the NAs by the means
activity_finaldata[na_position, "steps"] <- means_vector
head(activity_finaldata)
# Compute the total number of steps each day (NA values removed)
steps_perDay <- aggregate(activity_finaldata$steps,
by=list(activity_finaldata$date), FUN=sum)
# Rename the variables
names(steps_perDay) <- c("date", "total")
# Compute the histogram of the total number of steps each day
hist(steps_perDay$total,
breaks=seq(from=0, to=25000, by=2500),
col="red",
xlab="Total Number of Steps",
ylim=c(0, 30),
main="Histogram of Total No. of Steps per Day\n(NA replaced by mean value)")
# Compute the mean and median
mean(steps_perDay$total)
median(steps_perDay$total)
# The new factor variable "daytype" was already in the activity data frame
head(activity_finaldata)
# Load the lattice graphical library
library(lattice)
# Compute the average number of steps taken, averaged across all daytype variable
steps_means <- aggregate(activity_finaldata$steps,
by=list(activity_finaldata$daytype,
activity_finaldata$weekday,
activity_finaldata$interval), mean)
# Name the variables for the steps_means data frame
names(steps_means) <- c("daytype", "weekday", "interval", "mean")
head(steps_means)
# Compute the time series plot
xyplot(mean ~ interval | daytype, steps_means,
type="l",
lwd=1,
xlab="Interval",
ylab="Number of Steps",
layout=c(1,2))
